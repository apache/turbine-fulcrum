<?xml version="1.0"?>

<document>

  <properties>
    <title>Cache Component</title>
    <author email="epugh@upstate.com">Eric PUgh</author>
  </properties>

  <body>

  <section name="Overview">
    <p>
     This Service functions as a Global Cache.  A global cache is a good
     place to store items that you may need to access often but don't
     necessarily need (or want) to fetch from the database everytime.  A
     good example would be a look up table of States that you store in a
     database and use throughout your application.  Since information
     about States doesn't change very often, you could store this
     information in the Global Cache and decrease the overhead of
     hitting the database everytime you need State information.
   </p>
      
    <p>
      It is written 
      for use in Turbine but it can be used in any container compatible 
      with Avalon's ECM container.
    </p>    
  </section>
  
<section name="Configuration">

    <p>
      First, here is the role configuration.
    </p>

    <source>
    <![CDATA[
        <role
            name="org.apache.fulcrum.cache.GlobalCacheService"
            shorthand="cache"
            default-class="org.apache.fulcrum.cache.DefaultGlobalCacheService"/>
    ]]>
    </source>

      <p>
        And here is the configuration:
      </p>
    <source>

    <![CDATA[
        <cache cacheInitialSize="20" cacheCheckFrequency="5"/>
    ]]>
    </source>

  </section>

  <section name="Usage">

    <source><![CDATA[

    GlobalCacheService gs = null;
    try
    {
        /*
         * Look for the item in the cache.
         * If it doesn't exist or the item is stale,
         * the cache will throw an exception.
         */
        gs = (GlobalCacheService)avalonComponentService.lookup(GlobalCacheService.ROLE)

        CachedObject obj = gs.getObject("cached_object");

        data.setMessage( data.getScreen() + " Got " +
            obj.getContents().toString() + " from global cache!" );
    }
    catch(ObjectExpiredException gone)
    {
        /*
         * Add the item to the cache.
         */
        gs.addObject("cached_object",
            new CachedObject("in_the_cache",5000));

        data.setMessage( data.getScreen() +
            " Refreshed/or added new item to" +
            " the cache! Expires in 5 seconds" );
    }

    ]]></source>

    <p>
    You can also place an expiration time on your objects so the Service will
    automatically remove them when they expire. If you don't specify an expiration
    time, the Service uses 5 seconds. To see an example, look at the 
    test case <a href="xref-test/org/apache/fulcrum/cache/CacheTest.html">CacheTest</a>
    </p>

  </section> 

</body>
</document>
