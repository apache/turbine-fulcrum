<?xml version="1.0"?>

<document>

  <properties>
    <title>Security Component</title>
    <author email="epugh@upstate.com">Eric PUgh</author>
  </properties>

  <body>

  <section name="Overview">
    <p>
      This component attempts to provide a security framework  It is written 
      for use in Turbine but it has been expanded and can be used in any container compatible 
      with Avalon's ECM container.
    <ul>
      <li>Allow pluggability via Avalon components of various entities.</li>
      <li>Explicit Model interface allows entities to be glued together.</li>
      <li>Provide adapters to various other security systems</li>
      <li>Solve most common problems in dealing with security</li>
      <li>Not enforce assumptions about how a security framework should be setup.</li>
    </ul>
    </p>    
    <subsection name="Matrix">    
      <table>
        <tr>
          <th/><th colspan="4">Simple Model</th><th colspan="4">Turbine Model</th>
        </tr>
        <tr>
          <th/><th>User</th><th>Group</th><th>Role</th><th>Permission</th><th>User</th><th>Group</th><th>Role</th><th>Permission</th>
        </tr>
        <tr><th>Memory</th><td>X</td><td>X</td><td>X</td><td>X</td><td></td><td></td><td></td><td></td></tr>
        <tr><th>Hibernate</th><td>X</td><td>X</td><td>X</td><td>X</td><td></td><td></td><td></td><td></td></tr>
        <tr><th>Torque</th><td></td><td></td><td></td><td></td><td>X</td><td>X</td><td>X</td><td>X</td></tr>
        <tr><th>Passive</th><td></td><td></td><td></td><td></td><td>X</td><td></td><td></td><td></td></tr>
        <tr><th>NT</th><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
      </table>
    </subsection>
  </section>
  
  <section name="Common Security Implementations">
    <p>
    There are a couple common approaches to security.  Currently this component tries to solve
    two common setups for security.
    </p>    
    <subsection name="Simple">
      <p>
      For lack of a better name, this one is called Simple.  In it, you have a set of permissions
      that are related in a many to many relation ship with a set or roles.  Those roles are related
      in a many to many relationship with a set of groups.  A user is in a many to many relationship
      with a set of groups.  <i>note: I will try and get a diagram. any suggestions on diagram tools?</i>
      Also, after seeing some other schemes, maybe a better name would be <i>Complex</i> or <i>Very Flexible</i>
      as it is a much more complex approach.
      </p>
      <p>
      The <code>memory</code> package currently implements this security model.  However, if you
      change the SimpleModel objects, you could implement the second one, "Turbine".
      </p>
    </subsection>

    <subsection name="Turbine">
      <p>
    This model is based on what the Turbine application server uses.  In it, permissions are in a
    many to many relationship with Roles.  However, what makes this different is that instead of roles
    being related just to groups, there instead is a many to many relationship between users and 
    groups and roles.  So you pick a user, pick their role, and their group, and that is their permissions.
    This strikes me as a maintence nightmare, why actually have a group entity?
    <i>note: I will try and get a diagram. any suggestions on diagram tools?</i>
      </p>
      <p>
      The <code>torque</code> package currently implements this security model.  <strong>WARNING:
      this code hasn't been tested at all.  It only compiles.</strong>  
      </p>
    </subsection>
    <subsection name="UsersAndGroup (OSUser Model)">
      <p>
    This model is based on what OSUser implements.  In it, you have users, and groups, and security
    is based on a user belonging to a group.  Users can belong to multiple groups.  So groups become
    the equivalent of roles/permissions.  So, when an ACL class asks:  <code>acl.hasRole("someRole")</code>
    what it is really asking is whether the user is part of a group or not.
      </p>
      <p>
      <strong>This model has NOT yet been implemented.  If there is interest, it should be very easy to
      do.</strong>  
      </p>
    </subsection>
  </section>  
  
<section name="Simple">

    <subsection name="Usage of Simple InMemory component">
    <p>
    The InMemory components implement the Simple model.  All data is strictly in memory, and is
    not persisted.  Therefore when your application stops, all values are lost.  However, this is
    very useful in unit testing and prototyping using the Security component.  Notice how role,
    user, group, and permission managers are all Avalon components as well?  This allows you to swap one 
    component out for another.  Say you wanted to provide your own group manager that checked that
    a group existed in NT.  You could swap out the MemoryGroupManager implementation for a NTGroupManager,
    assuming you kept the API the same.
    </p>
    </subsection>
    <subsection name="Configuration">
    <p>
    This uses the integrated role and component config XML.  
    </p>
    <p>
<source>
<![CDATA[
<my-system>
  <component
    role="org.apache.fulcrum.security.SecurityService"
    class="org.apache.fulcrum.security.BaseSecurityService">   
  </component>  
  
  <component
    role="org.apache.fulcrum.security.UserManager"
    class="org.apache.fulcrum.security.spi.memory.simple.MemoryUserManagerImpl">   
  </component>   
  <component
    role="org.apache.fulcrum.security.GroupManager"
    class="org.apache.fulcrum.security.spi.memory.simple.MemoryGroupManagerImpl">   
  </component>     

  <component
    role="org.apache.fulcrum.security.RoleManager"
    class="org.apache.fulcrum.security.spi.memory.simple.MemoryRoleManagerImpl">   
  </component>     

  <component
    role="org.apache.fulcrum.security.PermissionManager"
    class="org.apache.fulcrum.security.spi.memory.simple.MemoryPermissionManagerImpl">   
  </component>     

  <component
    role="org.apache.fulcrum.security.ModelManager"
    class="org.apache.fulcrum.security.spi.memory.simple.MemoryModelManagerImpl">   
  </component>
</my-system>
]]>
</source>
    </p>
    </subsection>

  </section>

<section name="Adapters">
  <subsection name="Turbine">
    <p>
    In <code>org.apache.fulcrum.security.adapter.turbine</code> is an implementation of the Turbine Security Service.
    This is designed to allow you to run the Fulcrum Security Service, but have Turbine 2.3's be able to query, through
    the adapter the Fulcrum Security service.
    </p>
    </subsection>

  <subsection name="OSUser">
    <p>
    In <code>org.apache.fulcrum.security.adapter.osuser</code> is an implementation of the various *Provider classes 
    required by OSUser.  In order to have OSUser load up these classes, you must add this to your <code>ouser.xml</code> configuration
    file.
    </p>
   <p>
<source>
<![CDATA[
    <!-- Fulcrum providers -->
    <provider class="org.apache.fulcrum.security.adapter.osuser.FulcrumAccessProvider"/>       
    <provider class="org.apache.fulcrum.security.adapter.osuser.FulcrumCredentialsProvider"/>
  <!-- don't have a propertyset provider, so just return a memory one. -->
    <provider class="com.opensymphony.user.provider.memory.MemoryProfileProvider" />
]]>
</source>
    </p>    
    <p>
      When using the FulcrumAccessProvider and FulcrumCredentialsProvider, you must first pass into them the
      Fulcrum SecurityService class.  They both inherit from BaseFulcrumProvider, so you can just do 
      <code>BaseFulcrumProvider.setSecurityService(securityService)</code> before OSUser calls them for the
      first time.  
    </p>
    </subsection>    
</section>  

<section name="SPI Details">
  <subsection name="Hibernate">
    <p>
    With the Hibernate SPI, you can just subclass the HibernateSimpleUser object, provide your own mapping .hbm file
    and then any additional user properties will be persisted!  Very very easy customization to your environment!
    </p>
    </subsection>
</section>  

</body>
</document>
