<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<document>

  <properties>
    <title>Fulcrum OSWorkflow Example Application</title>
    <author email="epugh@upstate.com">Eric Pugh</author>
  </properties>

  <body>

  <section name="Overview">
    <p>
      This is a small example application using the Turbine framework with the Fulcrum Workflow component.
    </p>

    <p>
      It provides a similar demonstration using the Turbine framework to the example application included in
      the OpenSymphony OSWorkflow distriubution.  This includes demostrating running BeanShell and BSF scripts,
      user authenctication etc..
    </p>
    <p>
      It leverages the Turbine user by storing the user information in runData.getUser() object.  The persistence
      mechanism is in memory, but it is very easy to swap in the JDBC persistence engine for OSWorkflow and use the
      same demo.
    </p>

    <p>
      In this distribution is a little workflow pull tool that is used in the .vm templates as $workflow that allows
      easy access to some commonly used functions of the workflow service.
    </p>
    <p>
    <a href="screen1.png" target="_OUT">Workflows Screen</a><br/>
    <a href="screen2.png" target="_OUT">Workflow Detail Screen</a>
    </p>

    <p>
      Feedback is warmly appreciated!
    </p>
  </section>

  <section name="Build and Deploy Example">
  <p>
    To run this example, first check the source code out from CVS.  The .war file is not online as it is 10 megabytes, and Maven will
    download any of the dependencies that you don't already have!  Also, part of this example is to show a sample project structure
    as well.  By downloading/building/ and deploying you get the full lifecycle.
  </p>
  <p>
    To run this example, run 'maven war' from the fulcrum/osworkflow/example directory.  This will produce the WAR
    file that you need to deploy to your Tomcat webapp.  Make sure the name of the war file is changed to 'fulcrum-osworkflow-example'
    as the internal links expect that name.
  </p>
  <p>
  Please note that a number of dependencies that are defined in
  project.xml cannot be resolved automatically with maven. Using these
  pieces of software requires stepping through the process of accepting
  the licensing agreeement.
  Maven prints out the links to the sites from where the downloads can
  be made manually. Once downloaded and unpacked, copy the jars to the
  appropriate directories:
  </p>
  <ol>
  <li><b>activation.jar</b> ${maven.repo.local}/jaf/jars/activation.jar</li>
  <li><b>mail.jar</b> (it includes the content of smtp.jar, pop.jar and imap.jar)
  ${maven.repo.local}/javamail/jars/mail.jar</li>
  <li><b>jndi.jar</b> ${maven.repo.local}/jndi/jars/jndi.jar</li>
  </ol>
  <p>The dependency on jdbc can be commented out of project.xml. It should
  be part of your recent Java edition.</p>

  <p>Change the project.properties in the example directory to override the
  stated dependencies as explained in the user documentation of maven.
  </p>
  <source>
  <![CDATA[

  maven.repo.remote=http://www.ibiblio.org/maven/,http://jakarta.apache.org/turbine/repo

  maven.jar.override=on
  maven.jar.activation = ${maven.repo.local}/jaf/jars/activation.jar
  maven.jar.javamail = ${maven.repo.local}/javamail/jars/mail.jar
  maven.jar.jndi = ${maven.repo.local}/jndi/jars/jndi.jar

  maven.checkstyle.format = turbine

  # display the date on the site
  maven.xdoc.date = left
  # Display the version the web site is documenting
  maven.xdoc.version = ${pom.currentVersion}

  maven.multiproject.type=war

  ]]>
  </source>


  </section>

</body>
</document>
