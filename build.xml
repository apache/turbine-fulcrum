<?xml version="1.0"?>

<project name="Fulcrum" default="maven:jar" basedir=".">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time they invoke a target) -->

  <!-- Allow any user specific values to override the defaults -->
  <property file="${user.home}/build.properties" />
  <!-- Allow user defaults for this project -->
  <property file="build.properties" />
  <!-- Set default values for the build -->
  <property file="project.properties" />

  <!-- maven:start -->

  <!-- ================================================================== -->
  <!-- D E L E G A T O R S                                                -->
  <!-- ================================================================== -->

  <target
    name="maven:site">
    <ant antfile="${maven.home}/build-docs.xml" target="site"/>
  </target>

  <target
    name="maven:update-jars">
    <ant antfile="${maven.home}/build-maven.xml" target="update-jars"/>
  </target>

  <target
    name="maven:jar">
    <ant antfile="${maven.home}/build-maven.xml" target="jar"/>
  </target>

  <target
    name="maven:install-jar">
    <ant antfile="${maven.home}/build-maven.xml" target="install-jar"/>
  </target>

  <target
    name="maven:env">
    <ant antfile="${maven.home}/build-maven.xml" target="env"/>
  </target>

  <target
    name="maven:docs">
    <ant antfile="${maven.home}/build-docs.xml" target="docs"/>
  </target>

  <target
    name="maven:test">
    <ant antfile="${maven.home}/build-test.xml" target="test"/>
  </target>

  <target
    name="maven:clean">
    <ant antfile="${maven.home}/build-maven.xml" target="clean"/>
  </target>

  <target
    name="maven:metrics">
    <ant antfile="${maven.home}/build-metrics.xml" target="metrics"/>
  </target>

  <target
    name="maven:dist"
    depends="maven:compile">
    <ant antfile="${maven.home}/build-maven.xml" target="dist"/>
  </target>

  <target
    name="maven:deploy-site">
    <ant antfile="${maven.home}/build-docs.xml" target="deploy-site"/>
  </target>

  <target
    name="maven:gump-descriptor">
    <ant antfile="${maven.home}/build-maven.xml" target="gump-descriptor"/>
  </target>

  <target
    name="maven:javadocs">
    <ant antfile="${maven.home}/build-docs.xml" target="javadocs"/>
  </target>

  <target
    name="maven:compile">
    <ant antfile="${maven.home}/build-maven.xml" target="compile"/>
  </target>

  <target
    name="maven:init">
    <ant antfile="${maven.home}/build-maven.xml" target="init"/>
  </target>

  <target
    name="maven:cross-ref">
    <ant antfile="${maven.home}/build-docs.xml" target="cross-ref"/>
  </target>

  <!-- maven:end -->

  <!-- ================================================================== -->
  <!-- C H E C K  O M                                                     -->
  <!-- ================================================================== -->

  <!-- this will soon be moved into the security services build. -->

  <target name="check-om">

    <property
      name="omStatusFile"
      value="${maven.prepareSourceDirectory}/report.fulcrum.om.generation"
    />

    <uptodate
      property="omGenerated"
      targetfile="${omStatusFile}">
      <srcfiles
        dir="."
        includes="turbine-schema.xml"
      />
    </uptodate>
  </target>

  <!-- ================================================================ -->
  <!-- M A I N  T A R G E T                                             -->
  <!-- ================================================================ -->
  <!-- Generate Turbine SQL schema for supported DBs                    -->
  <!-- ================================================================ -->

  <target
    name="init">

    <taskdef
      name="create-classpath"
      classname="org.apache.maven.ant.CreateClasspath">
      <classpath>
        <pathelement location="${lib.repo}/maven.jar"/>
      </classpath>
    </taskdef>

    <create-classpath
      listFile="jars.list"
      reference="classpath"
      baseDir="${lib.repo}"
    />

    <taskdef name="torque-om"
      classname="org.apache.torque.task.TorqueDataModelTask">
      <classpath refid="classpath"/>
    </taskdef>

  </target>

  <target
    name="om"
    depends="check-om"
    unless="omGenerated"
    description="--> generates the Turbine OM/Peer classes">

    <!--
    We could create a fileset in the project to manage this
    but we should really only have one source directory.
    -->

    <copy todir="${maven.prepareSourceDirectory}" overwrite="yes">
      <fileset dir="src/java"/>
    </copy>

    <antcall target="security-om"/>
    <antcall target="scheduler-om"/>
  </target>

  <target
    name="security-om"
    depends="init">
<echo message="asd;lkfja;sldkfjasdlkfja;sdflkja;lskdjf"/>

    <filter token="DATABASE_DEFAULT" value="${security.database.name}"/>
    <filter token="DATABASE_JAVATYPE" value="${security.database.javatype}"/>
    <!-- is there a way to load this from an xml file? -->
    <filter token="EXTRA_USER_COLUMNS" value="${security.extra.user.columns}"/>
    <copy
      todir="${maven.prepareSourceDirectory}"
      file="${schemaDirectory}/turbine-schema.xml"
      filtering="yes"
    />

    <torque-om
      contextProperties="project.properties"
      controlTemplate="${OMControlTemplate}"
      outputDirectory="${maven.prepareSourceDirectory}"
      useClasspath="true"
      outputFile="report.fulcrum.om.generation"
      targetPackage="${securityPackage}"
      xmlFile="${maven.prepareSourceDirectory}/turbine-schema.xml"
      targetDatabase="${database}"
    />

  </target>

  <target
    name="scheduler-om"
    depends="init">

    <filter token="DATABASE_DEFAULT" value="${scheduler.database.name}"/>
    <copy
      todir="${maven.prepareSourceDirectory}"
      file="${schemaDirectory}/scheduler-schema.xml"
      filtering="yes"
    />

    <torque-om
      contextProperties="project.properties"
      controlTemplate="${OMControlTemplate}"
      outputDirectory="${maven.prepareSourceDirectory}"
      useClasspath="true"
      outputFile="report.fulcrum.scheduler.generation"
      targetPackage="${schedulerPackage}"
      xmlFile="${maven.prepareSourceDirectory}/scheduler-schema.xml"
    />

  </target>

</project>
